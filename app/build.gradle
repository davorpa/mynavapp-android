import com.android.build.gradle.internal.tasks.AndroidTestTask

apply plugin: 'com.android.application'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.androidTools
    defaultConfig {
        applicationId "com.davorpa.labs.androidstudio.mynavapp"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.compileSdk
        versionCode 1
        versionName versions.release

        // Specifies the fully-qualified class name of the test instrumentation runner.
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        // If set to 'true', enables the instrumentation class to start and stop profiling.
        // If set to false (default), profiling occurs the entire time the instrumentation
        // class is running.
        testHandleProfiling false
        // If set to 'true', indicates that the Android system should run the instrumentation
        // class as a functional test. The default value is 'false'
        testFunctionalTest false
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        textReport true
        textOutput 'stdout'
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }
    // share test source between local test and androidTest
    sourceSets {
        test {
            java.srcDir 'src/sharedTest/java'
        }
        androidTest {
            java.srcDir 'src/sharedTest/java'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation deps.androidx.appcompat
    implementation deps.android.material
    implementation deps.androidx.constraintlayout
    implementation deps.androidx.navigation.ui
    implementation deps.androidx.navigation.fragment
    implementation deps.androidx.lifecycle.extensions

    androidTestImplementation deps.androidx.test.rules
    androidTestImplementation deps.androidx.test.runner
    androidTestImplementation deps.androidx.test.ext
    androidTestImplementation deps.androidx.test.expresso.core
    androidTestImplementation deps.androidx.test.expresso.intents
    androidTestImplementation deps.androidx.test.truth
    // required if you want to use Robolectric for unit tests
//    androidTestImplementation deps.robolectric.annotations
    androidTestImplementation deps.junit
    // required if you want to use Mockito for Android tests
    androidTestImplementation deps.mockito.android

    testImplementation deps.junit
    // required if you want to use Mockito for unit tests
    testImplementation deps.mockito.core
    // required if you want to use Robolectric for unit tests
//    testImplementation deps.robolectric.core
    // required if you want to use Powermock+Mockito for unit tests
    testImplementation deps.powermock.junit
    testImplementation deps.powermock.junitRule
    testImplementation deps.powermock.mockito
    testImplementation deps.powermock.classloading
}

afterEvaluate {
    tasks.withType(AndroidTestTask) { task ->
        task.doFirst {
            logging.level = LogLevel.INFO
        }
        task.doLast {
            logging.level = LogLevel.LIFECYCLE
        }
    }
}
