import com.android.build.gradle.internal.tasks.AndroidTestTask

apply plugin: 'com.android.application'
apply plugin: 'com.github.kt3k.coveralls'

android {
    compileSdkVersion rootProject.versions.compileSdk
    buildToolsVersion rootProject.versions.androidTools
    defaultConfig {
        applicationId "com.davorpa.labs.androidstudio.mynavapp"
        minSdkVersion rootProject.versions.minSdk
        targetSdkVersion rootProject.versions.compileSdk
        versionCode 1
        versionName rootProject.versions.release

        // Specifies the fully-qualified class name of the test instrumentation runner.
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        // If set to 'true', enables the instrumentation class to start and stop profiling.
        // If set to false (default), profiling occurs the entire time the instrumentation
        // class is running.
        testHandleProfiling false
        // If set to 'true', indicates that the Android system should run the instrumentation
        // class as a functional test. The default value is 'false'
        testFunctionalTest false
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility rootProject.versions.javaSource
        targetCompatibility rootProject.versions.javaTarget
    }

    lintOptions {
        textReport true
        textOutput 'stdout'
    }

    //
    // Testing
    //
    testOptions {
        // Easy solution to integrate with mocking frameworks
        // https://developer.android.com/training/testing/unit-testing/local-unit-tests?hl=es#error-not-mocked
        unitTests.returnDefaultValues = true
        // Include framework dependencies (for Robolectric testing)
        // https://developer.android.com/training/testing/unit-testing/local-unit-tests#include-framework-dependencies
        unitTests.includeAndroidResources = true
    }
    // Add share test source between local test and androidTest
    // https://docs.gradle.org/current/userguide/building_java_projects.html#sec:custom_java_source_set_paths
    sourceSets {
        test.java.srcDirs += ["src/sharedTest/java"]
        androidTest.java.srcDirs += ["src/sharedTest/java"]
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation rootProject.deps.androidx.appcompat
    implementation rootProject.deps.android.material
    implementation rootProject.deps.androidx.constraintlayout
    implementation rootProject.deps.androidx.navigation.ui
    implementation rootProject.deps.androidx.navigation.fragment
    implementation rootProject.deps.androidx.lifecycle.extensions

    androidTestImplementation rootProject.deps.androidx.test.rules
    androidTestImplementation rootProject.deps.androidx.test.runner
    androidTestImplementation rootProject.deps.androidx.test.junit
    androidTestImplementation rootProject.deps.androidx.test.expresso.core
    androidTestImplementation rootProject.deps.androidx.test.expresso.intents
    androidTestImplementation rootProject.deps.androidx.test.truth
    // required if you want to use Robolectric for unit tests
//    androidTestImplementation deps.robolectric.annotations
    androidTestImplementation rootProject.deps.junit
    // required if you want to use Mockito for Android tests
    androidTestImplementation rootProject.deps.mockito.android

    testImplementation rootProject.deps.junit
    // required if you want to use Mockito for unit tests
    testImplementation rootProject.deps.mockito.core
    // required if you want to use Robolectric for unit tests
//    testImplementation deps.robolectric.core
    // required if you want to use Powermock+Mockito for unit tests
    testImplementation rootProject.deps.powermock.junit
    testImplementation rootProject.deps.powermock.junitRule
    testImplementation rootProject.deps.powermock.mockito
    testImplementation rootProject.deps.powermock.classloading
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/coverage/debug/report.xml"
}

tasks.coveralls {
    dependsOn 'connectedAndroidTest'
    onlyIf { System.env.'CI' }
}

afterEvaluate {
    tasks.withType(AndroidTestTask) { task ->
        task.doFirst {
            logging.level = LogLevel.INFO
        }
        task.doLast {
            logging.level = LogLevel.LIFECYCLE
        }
    }
}
